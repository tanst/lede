name: 云编译

on: 
#  push:
#    branches: 
#      - master
  schedule:
    - cron: 0 22 * * 2
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 校验本地文件
      uses: actions/checkout@master

    - name: 安装编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean

        df -h

    - name: 克隆源代码
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: 克隆增强功能源代码
      run: |
        git clone https://github.com/siryle1213/luci-app-fileassistant openwrt/package/luci-app-fileassistant
#        git clone https://github.com/vernesong/OpenClash openwrt/package/tmp
#        mv openwrt/package/tmp/luci-app-openclash openwrt/package

#    - name: SSH 连接
#      run: cd openwrt
#      uses: tanst/debugger-action@master

    - name: 升级 feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a


    - name: 导入自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        cd openwrt
        rm -f ./.config*
        touch ./.config

        #
        # ========================固件定制部分========================
        # 
        # 
        # 如果不对本区块做出任何编辑, 则生成默认配置固件. 
        # 
        # 以下为定制化固件选项和说明:
        #
        #
        # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
        # 
        #          =========================================
        #         |  # 取消编译VMware镜像:                   |
        #         |  cat >> .config <<EOF                   |
        #         |  # CONFIG_VMDK_IMAGES is not set        |
        #         |  EOF                                    |
        #          =========================================
        #
        # 
        # 以下是一些提前准备好的一些插件选项.
        # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
        # 如果不需要代码块里的某一项配置, 只需要删除相应行.
        #
        # 如果需要其他插件, 请按照示例自行添加.
        # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
        # 
        # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
        # 
        # 编译x64固件:
        cat >> .config <<EOF
        CONFIG_TARGET_x86=y
        CONFIG_TARGET_x86_64=y
        CONFIG_TARGET_x86_64_Generic=y
        EOF
        
        # 设置固件大小:
        cat >> .config <<EOF
        CONFIG_TARGET_KERNEL_PARTSIZE=32
        CONFIG_TARGET_ROOTFS_PARTSIZE=128
        EOF
        
        # 固件压缩:
        # cat >> .config <<EOF
        # CONFIG_TARGET_IMAGES_GZIP=y
        # EOF

        # 编译UEFI固件:
        # cat >> .config <<EOF
        # CONFIG_EFI_IMAGES=y
        # EOF
        
        # IPv6支持:
        cat >> .config <<EOF
        CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
        CONFIG_PACKAGE_ipv6helper=y
        EOF
        
        # USB3.0支持:
        cat >> .config <<EOF
        CONFIG_PACKAGE_kmod-usb-ohci=y
        CONFIG_PACKAGE_kmod-usb-ohci-pci=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb2-pci=y
        CONFIG_PACKAGE_kmod-usb3=y
        EOF
        
        # 多文件系统支持:
        cat >> .config <<EOF
        CONFIG_PACKAGE_kmod-fs-nfs=y
        CONFIG_PACKAGE_kmod-fs-nfs-common=y
        CONFIG_PACKAGE_kmod-fs-nfs-v3=y
        CONFIG_PACKAGE_kmod-fs-nfs-v4=y
        CONFIG_PACKAGE_kmod-fs-ntfs=y
        CONFIG_PACKAGE_kmod-fs-squashfs=y
        EOF
        
        # LuCI插件选择:
        cat >> .config <<EOF
        CONFIG_PACKAGE_luci-app-adbyby-plus=y
        CONFIG_PACKAGE_luci-app-advanced-reboot=y
        CONFIG_PACKAGE_luci-app-ssr-plus=y
        CONFIG_PACKAGE_luci-app-fileassistant=y
        CONFIG_PACKAGE_luci-app-mwan3=y
        CONFIG_PACKAGE_luci-app-hd-idle=y
        CONFIG_PACKAGE_luci-app-syncdial=y
        EOF
        
        # LuCI主题:
        cat >> .config <<EOF
        CONFIG_PACKAGE_luci-theme-argon=y
        CONFIG_PACKAGE_luci-theme-rosy=y
        CONFIG_PACKAGE_luci-theme-atmaterial=y
        EOF
        
        # 常用软件包:
        cat >> .config <<EOF
        CONFIG_PACKAGE_curl=y
        CONFIG_PACKAGE_htop=y
        CONFIG_PACKAGE_nano=y
        CONFIG_PACKAGE_screen=y
        CONFIG_PACKAGE_tree=y
        CONFIG_PACKAGE_vim-fuller=y
        CONFIG_PACKAGE_wget=y
        CONFIG_PACKAGE_iperf=y
        CONFIG_PACKAGE_iperf3=y
        CONFIG_PACKAGE_rsync=y
        CONFIG_PACKAGE_rsyncd=y
        CONFIG_PACKAGE_smartd=y
        CONFIG_PACKAGE_smartmontools=y
        CONFIG_PACKAGE_smartmontools-drivedb=y
        EOF
        
        # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
        sed -i 's/^[ \t]*//g' ./.config
        make defconfig

    - name: 增加固件初次安装日期
      run: |
        cd openwrt
        echo '增加固件初次安装日期'
        sed -i '/exit/d' package/lean/default-settings/files/zzz-default-settings
        cat << 'EOF' >> package/lean/default-settings/files/zzz-default-settings
        date=$(date +"%y.%-m.%-d")
        sed -i "s/\(DISTRIB_REVISION='.*\)'/\1\($date\)'/" /etc/openwrt_release
        
        exit 0
        EOF

    - name: 增加开机设置脚本
      run: |
        cd openwrt
        if [ ! -e files/etc ]; then
          mkdir -p files/etc
        fi
        echo '增加开机设置脚本'
        cat << 'EOF' > files/etc/rc.local
        # Put your custom commands here that should be executed once
        # the system init finished. By default this file does nothing.
        sleep 20 && /mnt/sda3/setup.sh
        exit 0
        EOF

    - name: 下载编译所需源码
      run: |
        cd openwrt && make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译
      run: |
        cd openwrt
        echo -e "$(nproc) thread build."
        make -j$(nproc) V=s

    - name: 清理不必要的文件
      run: |
        cd openwrt
        rm -rf ./artifact/
        mkdir -p ./artifact/
        find ./bin/targets/ -name "*combined*img*" | xargs -i mv -f {} ./artifact/
        find ./bin/targets/ -name "*sysupgrade*bin*" | xargs -i mv -f {} ./artifact/
        echo "::set-env name=FILENAME::$(echo "OpenWrt-firmware-x86-`date -d "+8 hour" +%Y%m%d-%H%M%S`")"
        mv -f ./.config ./artifact/ && mv -f ./bin/packages/ ./artifact/
        
    - name: 上传固件.
      uses: actions/upload-artifact@master
      with:
        name: ${{ env.FILENAME }}
        path: ./openwrt/artifact/

